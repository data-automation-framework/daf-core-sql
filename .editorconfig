root = true

[*.cs]

file_header_template = SPDX-License-Identifier: MIT\nCopyright © 2021 Oscar Björhn, Petter Löfgren and contributors

# IDE0073 Require file header. Disabled for now, seems to trigger even though we have the expected file header.
dotnet_diagnostic.IDE0073.severity = none

#Default severity for analyzer diagnostics with category 'Style' (escalated to build errors)
#If this isn't here, style violations won't generate warnings or errors.
dotnet_analyzer_diagnostic.category-Style.severity = error

# IDE0010 C# Populate switch
dotnet_diagnostic.IDE0010.severity = suggestion

#Charset
charset = utf-8-bom

#Core editorconfig formatting - indentation

#use hard tabs for indentation
indent_style = tab
tab_width = 4
indent_size = 4

#Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

#Formatting - new line options
insert_final_newline = true
trim_trailing_whitespace = true

#place catch statements on a new line
csharp_new_line_before_catch = true
#place finally statements on a new line
csharp_new_line_before_finally = true
#place else statements on a new line
csharp_new_line_before_else = true
#place members in anonymous types on a new line
csharp_new_line_before_members_in_anonymous_types = true
#place query expression clauses on new lines
csharp_new_line_between_query_expression_clauses = true
#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require braces to be on a new line for methods, control_blocks, types, lambdas, object_collection_array_initializers, and properties (also known as "Allman" style)
csharp_new_line_before_open_brace = methods, control_blocks, types, lambdas, object_collection_array_initializers, properties, accessors

#Formatting - organize using options

#place System.* using directives before other using directives
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false
#place a space between parantheses
csharp_space_between_parentheses = false
#place a space before and after binary operators
csharp_space_around_binary_operators = before_and_after

#disallow statements on a single line
csharp_preserve_single_line_statements = false
#leave code block on single line
csharp_preserve_single_line_blocks = true

#parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:error
#dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

#Formatting - wrapping options

# Unused expresion values
csharp_style_unused_value_expression_statement_preference = discard_variable:none

# Null-checking preferences
#csharp_style_throw_expression = true:suggestion
#csharp_style_conditional_delegate_call = true:suggestion

# Expression-level preferences
#csharp_style_deconstructed_variable_declaration = true:suggestion
#csharp_style_pattern_local_over_anonymous_function = true:suggestion

#Style - Code block preferences

#don't prefer curly braces for one line of code
csharp_prefer_braces = false:suggestion

#Style - expression bodied member options

#prefer block bodies for accessors
csharp_style_expression_bodied_accessors = when_on_single_line:none
#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:suggestion
#prefer block bodies for methods
csharp_style_expression_bodied_methods = false:suggestion
#prefer block bodies for properties
csharp_style_expression_bodied_properties = false:none
#
csharp_style_expression_bodied_operators = false:silent
#
csharp_style_expression_bodied_indexers = true:silent

#Style - expression level options

#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:error
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:none

#Style - Expression-level  preferences

#prefer default over default(T)
csharp_prefer_simple_default_expression = true:error
#prefer objects to be initialized using object initializers
dotnet_style_object_initializer = true:error

#other expression-level preferences
#dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:error
dotnet_style_null_propagation = true:error
dotnet_style_coalesce_expression = true:error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error
#dotnet_style_prefer_inferred_tuple_names = true:suggestion
#dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:error
dotnet_style_prefer_conditional_expression_over_assignment = false:silent
dotnet_style_prefer_conditional_expression_over_return = false:silent

#prefer range operator (not yet?)
csharp_style_prefer_range_operator = true:none

#prefer switch expressions (not yet?)
csharp_style_prefer_switch_expression = true:none

#prefer simple using statement (not yet?)
csharp_prefer_simple_using_statement = true:none

#style definitions
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

#use PascalCase for constant fields  
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = error
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds            = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities  = *
dotnet_naming_symbols.constant_fields.required_modifiers          = const

#Style - implicit and explicit types

#prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:error
#prefer explicit type over var to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = false:error
#prefer explicit type over var when the type is already mentioned on the right-hand side of a declaration
csharp_style_var_when_type_is_apparent = false:none

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
#dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error

#
dotnet_style_readonly_field = true:error

#Style - Pattern matching

#prefer pattern matching instead of is expression with type casts
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error

#Style - qualification options

# this. preferences
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_event = false:error
